---
title: "Beyond the Box Score: Exploring Contact Quality in 2024 MLB"
author: "Emily Shteynberg and Cale Latimer"
format:
  revealjs:
    theme: EDA_theme.scss
    smaller: true
    slide-number: c/t
    embed-resources: true
    code-line-numbers: false
    linestretch: 1.25
    html-math-method:
      method: mathjax
      url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
---

## Evaluating Batter Performance Requires More Than Just Outcomes

* Traditional stats miss *how* contact is made

* Batted ball metrics connect mechanics to outcomes on a per-play level

* Contact quality drives decisions in scouting, player development, and game strategy

## Our Data: Batted Ball Tracking

* Each row is a batted ball from 2024 MLB regular season (April 3, 2024 onward)[^1]

[^1]: Courtesy of Baseball Savant and accessed via sabRmetrics package

. . .

* How and where was the ball thrown? How and where was the ball hit? What was the outcome?

. . .

* Core variables:
  <ul>
    <li class="fragment">Pitch mechanics: pitch type, release speed, handedness</li>
    <li class="fragment">Batter mechanics: launch speed, launch angle, bat speed, swing length, handedness</li>
    <li class="fragment">Game context: count, outs, inning, defensive shift</li>
    <li class="fragment">Result: play outcome, fielding position, ball location</li>
  </ul>

## Question #1: Is there a “sweet spot” — a combination of launch speed and angle — that maximizes hit rate?

. . .

::: {.callout-note title="Formula" style="font-size: 1.5em;"}

$$
  \text{Hit Rate} = \frac{\text{Hits}}{\text{Batted Balls}}
                   = \frac{\text{Singles} + \text{Doubles} + \text{Triples} + \text{Home Runs}}{\text{Batted Balls}}
$$
:::


## There is no single sweet spot; the launch angle that maximizes hit rate changes with launch speed

```{r}
#| echo: false
#| fig-align: center

library(tidyverse)
library(viridis)
mlb <- read_csv("https://raw.githubusercontent.com/36-SURE/2025/main/data/mlb_batted_balls.csv")
 
mlb |> 
  mutate(is_hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0)) |> 
  ggplot(aes(x = launch_speed, y = launch_angle)) +
   stat_summary_hex(
    aes(z = is_hit), 
    fun = mean, 
    bins = 40
  ) +
  scale_fill_viridis_c(option="C", name = "Hit Rate", limits = c(0, 1)) +
  labs(
    x = "Launch Speed (mph)", 
    y = "Launch Angle (°)"
  ) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold")
  )

```


## Question #2: Do batters perform better when facing opposite-handed pitchers?

. . .

* Only included batters with at least 20 batted balls against each of same- and opposite-handed pitchers

::: {.callout-note title="Formula" style="font-size: 1.5em;"}
$$
  \begin{aligned}
  \text{Ball-in-Play (BIP) Value} &= \frac{\text{Total Bases}}{\text{Batted Balls}} \\[1em]
                   &= \frac{\text{Singles} + 2\times\text{Doubles} + 3\times\text{Triples} + 4\times\text{Home Runs}}{\text{Batted Balls}}
  \end{aligned}
$$
:::


## Opposite-handed matchups tend to yield higher BIP value — but exceptions are common

```{r}
#| echo: false
#| fig-align: center
mlb |>
  filter(!is.na(events), !is.na(bat_side), !is.na(pitch_hand)) |>
  mutate(side = case_when(
    (bat_side == "R" & pitch_hand == "R") | (bat_side == "L" & pitch_hand == "L") ~ "SameSide",
    (bat_side == "L" & pitch_hand == "R") | (bat_side == "R" & pitch_hand == "L") ~ "OppositeSide"
  )) |>
  group_by(batter_name) |>
  summarise(
    bip_value_same = (
      sum(events == "single" & side == "SameSide", na.rm = TRUE) * 1 +
        sum(events == "double" & side == "SameSide", na.rm = TRUE) * 2 +
        sum(events == "triple" & side == "SameSide", na.rm = TRUE) * 3 +
        sum(events == "home_run" & side == "SameSide", na.rm = TRUE) * 4
    ) / sum(side == "SameSide", na.rm = TRUE),
    
    bip_value_oppo = (
      sum(events == "single" & side == "OppositeSide", na.rm = TRUE) * 1 +
        sum(events == "double" & side == "OppositeSide", na.rm = TRUE) * 2 +
        sum(events == "triple" & side == "OppositeSide", na.rm = TRUE) * 3 +
        sum(events == "home_run" & side == "OppositeSide", na.rm = TRUE) * 4
    ) / sum(side == "OppositeSide", na.rm = TRUE),
    
    n_same = sum(side == "SameSide", na.rm = TRUE),
    n_oppo = sum(side == "OppositeSide", na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(n_same >= 20, n_oppo >= 20) |>
  mutate(bip_advantage = case_when(
    bip_value_same > bip_value_oppo ~ "Same-Handed Advantage",
    bip_value_same < bip_value_oppo ~ "Opposite-Handed Advantage",
    TRUE ~ "No Advantage"
  )) |>
  ggplot(aes(x = bip_value_oppo, y = bip_value_same)) +
  geom_point(aes(color = bip_advantage), alpha = 0.75) +
  scale_color_manual(values = c("red", "#117733", "#3399FF")) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black") +
  labs(
    x = "Avg BIP Value for\nOpposite-Handed Matchups",
    y = "Avg BIP Value for\nSame-Handed Matchups",
    color = "Batters with... "
  ) +
  coord_fixed() +
  theme_minimal(base_size = 16) +
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    legend.text=element_text(size=16)
  )
```

## Clustering Batters Based on Launch Speed, Launch Angle, Bat Speed Reveals 4 Archetypes

```{r}
set.seed(42)
mlb_features <- mlb |>
  group_by(batter_name) |> 
  summarize(
    avg_launch_speed=mean(launch_speed, na.rm=TRUE),
    avg_launch_angle=mean(launch_angle, na.rm=TRUE),
    avg_bat_speed=mean(bat_speed, na.rm=TRUE),
    balls_in_play=n()
  ) |> 
  filter(balls_in_play>=50) |> 
  select(-balls_in_play) |> 
  drop_na()

#standardize 
std_mlb_features <-mlb_features |> 
  select(-batter_name) |> 
  scale()

#default kmeans (Hartigan-Wong)
kmeans_result<- std_mlb_features |> 
  kmeans(centers=4, nstart=100)

# #to visualize results with many dimensions (features), do PCA and plot
# #plot top 2 dimensions (capture most of the variation in the data)
# library(factoextra)
# kmeans_result |> 
#   fviz_cluster(data=std_mlb_features,
#                geom="point",
#                ellipse=FALSE,
#                show.clust.cent = FALSE,
#                palette="Set1",
#                shape=16)+
#   ggthemes::scale_color_colorblind()+
#   labs(
#     x = "Principal Component 1",
#     y = "Principal Component 2",
#     color = "Cluster"
#   ) +
#   ggthemes::scale_color_colorblind() +
#   theme_minimal(base_size = 16) +
#   theme(
#     axis.title = element_text(face = "bold"),
#     legend.title = element_text(face = "bold"),
#     plot.title=element_blank(),
#   )

#clusters
clustered_batters <- data.frame(
  batter_name = mlb_features$batter_name,
  cluster=kmeans_result$cluster
) 


#temporarily join cluster info to compute BIP value per cluster
mlb_temp <- mlb |> 
  left_join(clustered_batters, by = "batter_name") |> 
  filter(!is.na(cluster))

#compute avg BIP value per cluster
#sort clusters by avg bip value (ascending), then just call them 1 through 4
cluster_ranking <- mlb_temp |> 
  group_by(cluster) |> 
  summarize(
    avg_bip_value = mean(case_when(
      events == "single" ~ 1,
      events == "double" ~ 2,
      events == "triple" ~ 3,
      events == "home_run" ~ 4,
      TRUE ~ 0
    ), na.rm = TRUE),
    .groups = "drop"
  ) |> 
  arrange(avg_bip_value) |> 
  mutate(ordered_cluster = row_number())

#reassign cluster labels in clustered_batters
clustered_batters <- clustered_batters |>
  left_join(cluster_ranking, by = "cluster") |>
  select(batter_name, cluster = ordered_cluster)

#append clusters to original df
mlb_features_clustered <- mlb |> 
  left_join(clustered_batters, by="batter_name") |> 
  filter(!is.na(cluster))

#append clusters to smaller df
mlb_features_clustered_subset <- mlb_features |> 
  left_join(clustered_batters, by="batter_name") |> 
  filter(!is.na(cluster))

mlb_features_clustered_subset_labels <- mlb_features_clustered_subset |> 
  mutate(cluster_label = factor(cluster, levels = 1:4, labels = c(
    "1: Weak Contact Hitters",
    "2: Balanced Hitters",
    "3: Line Drive Gap Hitters",
    "4: Power Sluggers"
  )))

mlb_features_clustered_subset_labels |> 
  ggplot(aes(x = avg_launch_speed, y = avg_launch_angle, color = cluster_label)) +
  geom_point(alpha = 0.8) +
  labs(
    x = "Avg Launch Speed (mph)",
    y = "Avg Launch Angle (°)",
    color = "Cluster"
  ) +
  ggthemes::scale_color_colorblind() +
  theme_minimal(base_size = 16) +
  theme(
    axis.title = element_text(face = "bold"),
    axis.text=element_text(size= 16),
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size=16),
    plot.title = element_blank()
  )


```

## Contact Metrics Vary by Cluster

```{r}
library(patchwork)
base_bar_theme <- theme_minimal(base_size = 14) +
  theme(
    axis.title =element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5)
  )

#bar plot: Launch Speed per cluster
launch_speed_bar <- mlb_features_clustered_subset |>
  group_by(cluster) |>
  summarize(avg = mean(avg_launch_speed, na.rm = TRUE)) |>
  ggplot(aes(x = factor(cluster), y = avg)) +
  geom_col(fill = "firebrick") +
  labs(title = "Average Launch Speed", x ="Cluster", y= "mph") +
  base_bar_theme

#bar plot: launch Angle per cluster
launch_angle_bar <- mlb_features_clustered_subset |>
  group_by(cluster) |>
  summarize(avg = mean(avg_launch_angle, na.rm = TRUE)) |>
  ggplot(aes(x = factor(cluster), y = avg)) +
  geom_col(fill = "firebrick")+
  labs(title = "Average Launch Angle", x = "Cluster", y = "Degrees") +
  base_bar_theme

#bar plot: bat Speed per cluster
bat_speed_bar <- mlb_features_clustered_subset |>
  group_by(cluster) |>
  summarize(avg = mean(avg_bat_speed, na.rm = TRUE)) |>
  ggplot(aes(x = factor(cluster), y = avg)) +
  geom_col(fill = "firebrick") +
  labs(title = "Average Bat Speed", x = "Cluster", y = "mph") +
  base_bar_theme

# Combine
combined_plot <- launch_speed_bar +launch_angle_bar + bat_speed_bar + plot_layout(ncol = 3)
combined_plot

```

## Higher-Quality Contact Yields More Valuable Batted Balls

```{r}

#avg bip value per cluster
#divide hits by total batted balls in each cluster
cluster_ranking |> 
  ggplot(aes(x = factor(ordered_cluster), y = avg_bip_value)) +
  geom_col(fill = "firebrick") +
  labs(x = "Cluster", y = "Avg BIP Value") +
  theme_minimal(base_size=16)+
  labs(
    x = "Cluster",
    y = "Avg BIP Value"
  ) +
  theme(
    plot.title = element_blank(),
    axis.title = element_text(face = "bold"),
  )+
  geom_text(
    aes(label = round(avg_bip_value, 3)), 
    vjust = -0.5, 
    size = 5, 
    fontface = "bold"
  )+ 
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) 
```

## Final Remarks: Contact Quality and Context Help Determine Batted Ball Value

* No single fixed "sweet spot" — optimal launch angle varies with launch speed

. . .

* Opposite-handed matchups often offer an edge — but not for every batter

. . .

* Clustering reveals 4 batter archetypes; stronger contact profiles yield higher batted ball value

. . .

* Future work: explore defensive shifts, batter and pitcher skill, team-level clustering, changes in performance over the season, strikeouts and walks

# Appendix

## Top 5 Batters by Event Type

```{r}
#top batters by event type (hits only)
library(tidytext)
mlb |> 
  filter(events%in% c("double", "single", "triple", "home_run")) |> 
  count(batter_name, events, sort=TRUE) |> 
  group_by(events) |> 
  slice_max(n, n=5) |> 
  ungroup() |> 
  mutate(
    events = case_when(
      events == "single" ~ "Single",
      events == "double" ~ "Double",
      events == "triple" ~ "Triple",
      events == "home_run" ~ "Home Run"
    ),
    events = factor(events, levels = c("Single", "Double", "Triple", "Home Run"))
  ) |> 
  ggplot(aes(x = reorder_within(batter_name, n, events), y = n, fill = events)) +
  geom_col(show.legend=FALSE)+
  facet_wrap(~events, scales ="free")+
  coord_flip()+
  scale_x_reordered()+
  scale_y_continuous(expand=c(0,0))+
  labs(x="Batter", y="Count")+
  theme_minimal(base_size=16)+
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    strip.text = element_text(face = "bold")
  )+
  scale_fill_manual(
    values = c(
      "Single" = "#E69F00",   
      "Double" = "#009E73",   
      "Triple" = "#0072B2",   
      "Home Run" = "#D55E00"
    )
  )

```

## Hit Rate for Each Event by Launch Speed & Angle

```{r}
mlb_long <- mlb |> 
  filter(!is.na(launch_speed), !is.na(launch_angle)) |> 
  mutate(
    single = as.integer(events == "single"),
    double = as.integer(events == "double"),
    triple = as.integer(events == "triple"),
    home_run = as.integer(events == "home_run")
  ) |> 
  pivot_longer(
    cols = c(single, double, triple, home_run),
    names_to = "hit_type",
    values_to = "is_event"
  ) |> 
  mutate(hit_type = case_when(
    hit_type == "single" ~ "Single",
    hit_type == "double" ~ "Double",
    hit_type == "triple" ~ "Triple",
    hit_type == "home_run" ~ "Home Run"
  ),
  hit_type = factor(hit_type, levels = c("Single", "Double", "Triple", "Home Run")))

mlb_long |> 
ggplot(aes(x = launch_speed, y = launch_angle)) +
  stat_summary_hex(aes(z = is_event), fun = mean, bins = 40) +
  scale_fill_viridis_c(option="C", name = "Event Rate", limits = c(0, 1)) +
  facet_wrap(~hit_type) +
  labs(
    title = "Event Rate by Launch Speed & Angle",
    x = "Launch Speed (mph)", y = "Launch Angle (°)"
  ) +
  theme_minimal(base_size=16)+
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    strip.text = element_text(face = "bold"),
    plot.title= element_blank()
  )

```


## Hit Rate for Each Batted Ball Type by Launch Speed & Angle
```{r}

mlb |> 
  filter(!is.na(launch_speed), !is.na(launch_angle), !is.na(bb_type)) |> 
  mutate(
    bb_type = case_when(
      bb_type == "line_drive" ~ "Line drive",
      bb_type == "fly_ball" ~ "Fly ball",
      bb_type == "ground_ball" ~ "Ground ball",
      bb_type == "popup" ~ "Popup",
      TRUE ~ "Other"
    )) |> 
  mutate(value = 1) |> 
  pivot_wider(names_from = bb_type, values_from = value, values_fill = 0) |> 
  pivot_longer(cols = c("Line drive", "Fly ball", "Ground ball", "Popup"), 
               names_to = "BB Type", values_to = "is_type") |>
  mutate(`BB Type` = factor(`BB Type`, levels = c("Ground ball", "Line drive", "Fly ball", "Popup"))) |> 
  ggplot(aes(x = launch_speed, y = launch_angle)) +
  stat_summary_hex(aes(z = is_type), fun = mean, bins = 40) +
  scale_fill_viridis_c(option="C", name = "Batted Ball Rate", limits = c(0, 1)) +
  facet_wrap(~ `BB Type`) +
  labs(
    title = "Batted Ball Type by Launch Speed & Angle",
    x = "Launch Speed (mph)", y = "Launch Angle (°)"
  ) +
  theme_minimal(base_size=16)+
  theme(
    axis.title = element_text(face = "bold"),
    legend.title = element_text(face = "bold"),
    strip.text = element_text(face = "bold"),
    plot.title= element_blank()
  )
```

## Elbow Plot

```{r}
#elbow plot
library(factoextra)
std_mlb_features |> 
  fviz_nbclust(kmeans, method = "wss")
```

## Hit Rate by Event for each Cluster

```{r}
#similar multi bar plot as before but with hit rate
#count types of hits per cluster
cluster_hit_rates <- mlb_features_clustered |> 
  filter(events %in% c("single", "double", "triple", "home_run")) |> 
  group_by(cluster) |>
  mutate(total_batted_balls = n()) |>  
  group_by(cluster, events, total_batted_balls) |> 
  summarize(hits = n(), .groups = "drop") |> 
  mutate(hit_rate = hits / total_batted_balls)



#scatterplot of count of each hit, color by cluster
cluster_hit_rates |> 
  mutate(events = factor(events, levels = c("single", "double", "triple", "home_run"))) |> 
  ggplot(aes(x = factor(cluster), y = hit_rate, fill = events)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Cluster", y = "Rate", fill = "Event", title = "Hit Rates by Event for Each Cluster") +
  scale_fill_manual(
    values = c(
      "single" = "#E69F00",   
      "double" = "#009E73",   
      "triple" = "#0072B2",   
      "home_run" = "#D55E00"
    ),
    labels = c(
      "single" = "Single",
      "double" = "Double",
      "triple" = "Triple",
      "home_run" = "Home Run"
    )
  )+
  theme_minimal(base_size=14)+
  theme(
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 12),
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    plot.title=element_blank()
  )

```

## Hit Rate by Batted Ball Type for each cluster

```{r}
#ball type rates per cluster
ball_type_rates <- mlb_features_clustered |> 
  filter(!is.na(bb_type)) |> 
  group_by(cluster, bb_type) |> 
  summarize(count = n(), .groups = "drop") |> 
  group_by(cluster) |> 
  mutate(rate = count / sum(count)) |> 
  mutate(bb_type = factor(bb_type, levels = c("ground_ball", "line_drive", "fly_ball", "popup")))


#bar plot: all Type Rates by Cluster
ball_type_rates |> 
  ggplot( aes(x = factor(cluster), y = rate, fill = bb_type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    x = "Cluster",
    y = "Rate",
    fill = "Ball Type",
    title = "Ball Type Rates by Cluster"
  ) +
  ggthemes::scale_fill_calc(
    labels = c(
      "fly_ball" = "Fly ball",
      "ground_ball" = "Ground ball",
      "line_drive" = "Line drive",
      "popup" = "Popup"
    )
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 12),
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 12),
    plot.title=element_blank()
  )
```

## Batters Closest to the Averages of Each Cluster (min. 50 Batted Balls)
```{r}
df <- data.frame(
  cluster = c(1,1,1,2,2,2,3,3,3,4,4,4),
  batter_name = c("Jankowski, Travis", "Sánchez, Angel", "Bruján, Vidal",
                  "Palacios, Richie", "Gomes, Yan", "Martini, Nick",
                  "Canzone, Dominic", "Diaz, Yainer", "Realmuto, J.T.",
                  "Grichuk, Randal", "Langford, Wyatt", "Rice, Ben"),
  avg_speed = c(84.0, 81.9, 83.7, 86.1, 85.8, 86.8, 90.0, 90.1, 89.0, 90.6, 89.5, 90.0),
  avg_angle = c(5.31, 5.04, 6.79, 14.5, 14.1, 14.3, 9.69, 8.95, 9.24, 17.4, 17.0, 17.7),
  avg_bat = c(65.3, 66.2, 65.2, 68.5, 68.8, 69.0, 72.0, 72.5, 72.6, 73.3, 73.7, 71.7),
  bip_value = c(0.280, 0.239, 0.411, 0.417, 0.423, 0.422, 0.541, 0.517, 0.578, 0.638, 0.539, 0.486),
  distance = c(1.33, 1.35, 1.42, 0.309, 0.560, 0.564, 0.506, 0.677, 0.742, 0.983, 1.22, 1.28),
  stringsAsFactors = FALSE
)

colnames(df) <- c("Cluster", "Name", "Avg Launch Speed", "Avg Launch Angle", "Avg Bat Speed", "BIP Value", "Distance from Cluster Avgs")

highlight_names <- c("Jankowski, Travis", "Palacios, Richie", "Canzone, Dominic", "Grichuk, Randal")

library(gt)
df |>
  gt() |>
  tab_style(
    style = cell_fill(color = "lightgreen"),
    locations = cells_body(
      rows = Name %in% highlight_names
    )
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
        locations = cells_column_labels()
    ) |> 
  tab_options(
    table.width = pct(100)  #or px(some number)
  )

```

